{
  "comment": "Squirrel Syntax",
  "fileTypes": [
    ".nut"
  ],
  "foldingStartMarker": "/\\*\\*|\\{\\s*$",
  "foldingStopMarker": "\\*\\*/|^\\s*\\}",
  "keyEquivalent": "^~S",
  "name": "Squirrel",
  "patterns": [
    {
      "captures": {
        "1": {
          "name": "storage.type.class.squirrel"
        },
        "2": {
          "name": "entity.name.type.class.squirrel"
        },
        "3": {
          "name": "storage.modifier.extends.squirrel"
        },
        "4": {
          "name": "entity.other.inherited-class.squirrel"
        }
      },
      "match": "\\b(class)\\s+([a-zA-Z_](?:\\w|\\.)*)(?:\\s+(extends)\\s+([a-zA-Z_](?:\\w|\\.)*))?",
      "name": "meta.class.squirrel"
    },
    {
      "captures": {
        "1": {
          "name": "keyword.control.squirrel"
        },
        "2": {
          "name": "entity.name.function"
        },
        "3": {
          "name": "variable.parameter"
        }
      },
      "match": "^\\s*(function)\\s*([a-zA-Z0-9_]*)\\s*\\(([a-zA-Z0-9_]*(,\\s*[a-zA-Z0-9_]+)*)\\)",
      "name": "other.function"
    },
    {
      "captures": {
        "1": {
          "name": "entity.name.function"
        },
        "2": {
          "name": "variable.parameter"
        }
      },
      "match": "^\\s*(constructor)\\s*\\((.*)\\)",
      "name": "other.constructor"
    },
    {
      "captures": {
        "1": {
          "name": "support.function"
        }
      },
      "match": "^\\s*(::[a-zA-Z0-9_]*)",
      "name": "other.global"
    },
    {
      "match": "\\b(if|else|while|do|switch|case|break|for|foreach|return|throw|yield|continue|catch|resume|default)\\b",
      "name": "keyword.control.squirrel"
    },
    {
      "match": "\\b(local|class|function|enum)\\b",
      "name": "storage.type.squirrel"
    },
    {
      "match": "\\b(extends|static|const)\\b",
      "name": "storage.modifier.squirrel"
    },
    {
      "match": "\\b(delete|in|clone|instanceof|typeof)\\b",
      "name": "keyword.operator.squirrel"
    },
    {
      "match": "\\btrue\\b",
      "name": "constant.language.boolean.true.squirrel"
    },
    {
      "match": "\\bfalse\\b",
      "name": "constant.language.boolean.false.squirrel"
    },
    {
      "match": "\\bnull\\b",
      "name": "constant.language.null.squirrel"
    },
    {
      "match": "\\b(base|this)\\b",
      "name": "variable.language.squirrel"
    },
    {
      "match": "!|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|==|=|!=|<=|>=|<=>|<-|>>>|<<|>>|!|&&|\\|\\||\\?\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|&=|%=|\\b(in|instanceof|typeof)\\b",
      "name": "keyword.operator.squirrel"
    },
    {
      "match": "\\b(array|blob|getroottable|date|this|time|math|clock|agent|device|server|imp|hardware|nv|http|mqtt)\\b",
      "name": "variable.language.electricimp"
    },
    {
      "match": "\\b(assert|bindenv|castf2i|casti2f|swap2|swap4|swapfloat|regexp|regexp2|format|lstrip|rstrip|split|strip)\\b",
      "name": "keyword.language.electricimp"
    },
    {
      "match": "\\b(RAND_MAX|PI|DIGITAL_IN|DIGITAL_IN_PULLUP|DIGITAL_IN_PULLDOWN|DIGITAL_IN_WAKEUP|DIGITAL_OUT|DIGITAL_OUT_OD|DIGITAL_OUT_OD_PULLUP|ANALOG_IN|ANALOG_OUT|PWM_OUT|PWM_OUT_STEPS|PULSE_COUNTER|PTPG_OUT_ACTIVE_HIGH|PTPG_OUT_ACTIVE_LOW|SPI_257|SPI_189|UART_1289|UART_57|UART_12|I2C_12|I2C_89|SIMPLEX_TX|SIMPLEX_RXCLOCK_IDLE_HIGH|CLOCK_IDLE_LOW|CLOCK_2ND_EDGE|LSB_FIRST|MSB_FIRST|NO_SCLK|NO_TX|NO_RX|NO_CTSRTS|CALLBACK_WITH_FLAGS|PARITY_NONE|PARITY_EVEN|PARITY_ODD|CLOCK_SPEED_10_KHZ|CLOCK_SPEED_50_KHZ|CLOCK_SPEED_100_KHZ|CLOCK_SPEED_400_KHZ|NORMALISE|A_LAW_COMPRESS|A_LAW_DECOMPRESS|AUDIO|SYNC|ENVIRONMENT_CARD|ENVIRONMENT_MODULE|ENVIRONMENT_AGENT|WAKEREASON_POWER_ON|WAKEREASON_TIMER|WAKEREASON_SW_RESET|WAKEREASON_PIN1|WAKEREASON_PIN|WAKEREASON_NEW_SQUIRREL|WAKEREASON_SQUIRREL_ERROR|WAKEREASON_NEW_FIRMWARE|WAKEREASON_SNOOZE|WAKEREASON_HW_RESET|WAKEREASON_BLINKUP|SHUTDOWN_NEWSQUIRREL|SHUTDOWN_NEWFIRMWARE|SHUTDOWN_OTHER|WAIT_TIL_SENT|WAIT_FOR_ACK|SUSPEND_ON_ERROR|RETURN_ON_ERROR|BLINKUP_FAST|BLINKUP_ACTIVEHIGH|SERVER_CONNECTED|NO_WIFI|NO_IP_ADDRESS|NO_SERVER|NOT_RESOLVED|NOT_CONNECTED|SEND_ERROR_NOT_CONNECTED|SEND_ERROR_TIMEOUT|SEND_ERROR_DISCONNECTED|SUNDAY|MONDAY|TUESDAY|WEDNESDAY|THURSDAY|FRIDAY|SATURDAY|WRITE_DONE|READ_READY|NOISE_ERROR|FRAME_ERROR|PARITY_ERROR|OVERRUN_ERROR|LINE_IDLE|WRITE_HALF_DONE|SPIFLASH_POSTVERIFY|SPIFLASH_PREVERIFY|NO_TIMEOUT|VALIDATE_NONE|VALIDATE_USING_SYSTEM_CA_CERTS)\\b",
      "name": "constant.language.electricimp"
    },
    {
      "match": "\\;",
      "name": "punctuation.terminator.statement.squirrel"
    },
    {
      "match": "\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))\\b",
      "name": "constant.numeric.squirrel"
    },
    {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.squirrel"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.squirrel"
        }
      },
      "name": "string.quoted.single.squirrel"
    },
    {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.squirrel"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.squirrel"
        }
      },
      "name": "string.quoted.double.squirrel"
    },
    {
      "begin": "/\\*\\*(?!/)",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.squirrel"
        }
      },
      "end": "\\*/",
      "name": "comment.block.documentation.squirrel"
    },
    {
      "begin": "/\\*",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.squirrel"
        }
      },
      "end": "\\*/",
      "name": "comment.block.squirrel"
    },
    {
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.squirrel"
        }
      },
      "match": "(//).*$\\n?",
      "name": "comment.line.double-slash.squirrel"
    },
    {
      "match": "\\{|\\}",
      "name": "meta.brace.curly.squirrel"
    },
    {
      "match": "\\(|\\)",
      "name": "meta.brace.round.squirrel"
    },
    {
      "match": "\\[|\\]",
      "name": "meta.brace.square.squirrel"
    }
  ],
  "scopeName": "source.nut",
  "uuid": "ccfe3470-9899-4d26-9f42-9c880131b71c"
}
