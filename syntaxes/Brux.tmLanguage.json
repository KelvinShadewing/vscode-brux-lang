{
	"comment": "Brux Syntax",
	"fileTypes": [
		".brx"
	],
	"foldingStartMarker": "/\\*\\*|\\{\\s*$",
	"foldingStopMarker": "\\*\\*/|^\\s*\\}",
	"keyEquivalent": "^~S",
	"name": "Brux",
	"patterns": [
		{
			"captures": {
				"1": {
					"name": "storage.type.class.brux"
				},
				"2": {
					"name": "entity.name.type.class.brux"
				},
				"3": {
					"name": "storage.modifier.extends.brux"
				},
				"4": {
					"name": "entity.other.inherited-class.brux"
				}
			},
			"match": "\\b(class)\\s+([a-zA-Z_](?:\\w|\\.)*)(?:\\s+(extends)\\s+([a-zA-Z_](?:\\w|\\.)*))?",
			"name": "meta.class.brux"
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.brux"
				},
				"2": {
					"name": "entity.name.function"
				},
				"3": {
					"name": "variable.parameter"
				}
			},
			"match": "^\\s*(function)\\s*([a-zA-Z0-9_]*)\\s*\\(([a-zA-Z0-9_]*(,\\s*[a-zA-Z0-9_]+)*)\\)",
			"name": "other.function"
		},
		{
			"captures": {
				"1": {
					"name": "entity.name.function"
				},
				"2": {
					"name": "variable.parameter"
				}
			},
			"match": "^\\s*(constructor)\\s*\\((.*)\\)",
			"name": "other.constructor"
		},
		{
			"captures": {
				"1": {
					"name": "support.function"
				}
			},
			"match": "^\\s*(::[a-zA-Z0-9_]*)",
			"name": "other.global"
		},
		{
			"match": "\\b(if|else|while|do|switch|case|break|for|foreach|return|throw|yield|continue|catch|resume|default)\\b",
			"name": "keyword.control.brux"
		},
		{
			"match": "\\b(local|class|function|enum)\\b",
			"name": "storage.type.brux"
		},
		{
			"match": "\\b(extends|static|const)\\b",
			"name": "storage.modifier.brux"
		},
		{
			"match": "\\b(delete|in|clone|instanceof|typeof)\\b",
			"name": "keyword.operator.brux"
		},
		{
			"match": "\\btrue\\b",
			"name": "constant.language.boolean.true.brux"
		},
		{
			"match": "\\bfalse\\b",
			"name": "constant.language.boolean.false.brux"
		},
		{
			"match": "\\bnull\\b",
			"name": "constant.language.null.brux"
		},
		{
			"match": "\\b(base|this)\\b",
			"name": "variable.language.brux"
		},
		{
			"match": "!|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|==|=|!=|<=|>=|<=>|<-|>>>|<<|>>|!|&&|\\|\\||\\?\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|&=|%=|\\b(in|instanceof|typeof)\\b",
			"name": "keyword.operator.brux"
		},
		{
			"match": "\\b(math.abs|math.acos|math.asin|math.atan|math.atan2|math.ceil|math.cos|math.exp|math.fabs|math.floor|math.log|math.log10|math.pow|math.rand|math.sin|math.sqrt|math.tan)\\b",
			"name": "variable.language.brux.standard.math"
		},
		{
			"match": "\\b(format|strip|lstrip|rstrip|split)\\b",
			"name": "variable.language.brux.string"
		},
		{
			"match": "\\b(array|blob|math|regexp|regexp2)\\b",
			"name": "variable.language.brux.standard"
		},
		{
			"match": "\\b(callee|collectgarbage|type)\\b",
			"name": "variable.language.brux.standard.base"
		},
		{
			"match": "\\b(actor|Actor|newActor|deleteActor|runActors|countActors|checkActor)\\b",
			"name": "variable.language.brux.standard.actors"
		},
		{
			"match": "\\b(loadSound|loadMusic|playSound|playMusic|deleteSound|deleteMusic|checkSound|checkMusic|stopSound|stopMusic|setMaxChannels|pauseMusic|resumeMusic|musicPaused)\\b",
			"name": "variable.language.brux.standard.audio"
		},
		{
			"match": "\\b(k__0|k__1|k__2|k__3|k_a|k_b|k_c|k_d|k_e|k_f|k_g|k_h|k_i|k_j|k_l|k_m|k_n|k_o|k_p|k_q|k_r|k_s|k_t|k_u|k_v|k_w|k_x|k_y|k_z|k_1|k_2|k_3|k_4|k_5|k_6|k_7|k_8|k_9|k_0|k_return|k_enter|k_escape|k_backspace|k_tab|k_space|k_minus|k_equals|k_lbracket|k_lbrace|k_rbracket|k_rbrace|k_backslash|k_nonuslash|k_semicolon|k_apostrophe|k_quote|k_grave|k_tick|k_comma|k_period|k_fullstop|k_slash|k_capslock|k_caps|k_f1|k_f2|k_f3|k_f4|k_f5|k_f6|k_f7|k_f8|k_f9|k_f10|k_f11|k_f12|k_printscreen|k_print|k_scrolllock|k_pause|k_insert|k_home|k_pageup|k_pgup|k_pagedown|k_pgdn|k_delete|k_end|k_right|k_left|k_down|k_up|k_numlock|k_numdivide|k_numdiv|k_nummultiply|k_nummul|k_numminus|k_numsub|k_numplus|k_numadd|k_numenter|k_numreturn|k_num1|k_num2|k_num3|k_num4|k_num5|k_num6|k_num7|k_num8|k_num9|k_num0|k_numperiod|k_numfullstop|k_numdot|k_numdelete|k_numdel|k_nonusbackslash|k_application|k_app|k_power|k_numequals|k_f13|k_f14|k_f15|k_f16|k_f17|k_f18|k_f19|k_f20|k_f21|k_f22|k_f23|k_f24|k_execute|k_exe|k_help|k_menu|k_select|k_stop|k_again|k_undo|k_cut|k_copy|k_paste|k_find|k_mute|k_volumeup|k_volup|k_volumedown|k_voldn|k_numcomma|k_numequalsas400|k_inat1|k_inat2|k_inat3|k_inat4|k_inat5|k_inat6|k_inat7|k_inat8|k_inat9|k_lang1|k_lang2|k_lang3|k_lang4|k_lang5|k_lang6|k_lang7|k_lang8|k_lang9|k_alterase|k_sysreq|k_cancel|k_clear|k_prior|k_return2|k_separator|k_out|k_oper|k_clearagain|k_crsel|k_exsel|k_num00|k_num000|k_thousandsep|k_decimalsep|k_currency|k_currencysub|k_numlparen|k_numrparen|k_numlbrace|k_numrbrace|k_numtab|k_numbackspace|k_numa|k_numb|k_numc|k_nume|k_numf|k_numxor|k_numpower|k_numpercent|k_numless|k_numgreater|k_numampersand|k_numamp|k_numdblampersand|k_numdblamp|k_numverticalbar|k_numvbar|k_numcolon|k_numhash|k_numspace|k_numat|k_numexclam|k_nummemstore|k_nummemrecall|k_nummemclear|k_nummemadd|k_nummemsubtract|k_nummemsub|k_nummemmultiply|k_nummemmul|k_nummemdivide|k_nummemdiv|k_numplusminus|k_numaddsub|k_numclear|k_numclearentry|k_numbinary|k_numoctal|k_numdecimal|k_numhexadecimal|k_lctrl|k_lcontrol|k_rctrl|k_rcontrol|k_lalt|k_lgui|k_ralt|k_rgui|k_lshift|k_rshift|k_mode|k_audionext|k_audioprev|k_audiostop|k_audioplay|k_audiomute|k_mediaselect|k_www|k_mail|k_calculator|k_calc|k_computer|k_com|k_acsearch|k_achome|k_acback|k_acprev|k_acforward|k_acnext|k_acstop|k_acrefresh|k_acbookmarks|k_brightnessup|k_brup|k_brightnessdown|k_brdn|k_displayswitch|k_kbdillumtoggle|k_kbdillumup|k_kbdillumdown|k_eject|k_sleep|k_app1|k_app2|k_num_scancodes|_1|_2|_3|_4|_5|_6|_7|_8|_9|_10|_11|_12|_13|_14|_15|_16|_17|_18|_19|_20|_21|_22|_23|_24|_25|_26|_27|_28|_29|_30|_31|_32|ha_left|ha_center|ha_right|va_top|va_center|va_bottom|bm_norm|bm_add|bm_sub|bm_mult|os_windows|os_linux|os_android|os_mac)\\b",
			"name": "constant.language.brux.standard.constants"
		},
		{
			"match": "\\b(fileExists|fileWrite|fileRead|fileAppend|jsonRead|jsonWrite|getdir|chdir|lsdir)\\b",
			"name": "variable.language.brux.standard.fileio"
		},
		{
			"match": "\\b(clearScreen|setDrawTarget|drawImage|setDrawColor|updateScreen|drawRec|drawCircle|setBackgroundColor|loadImage|loadImageKeyed|setScalingFilter|setBlendMode|setFPS|getFPS|setWindowTitle|setResolution)\\b",
			"name": "variable.language.brux.standard.graphics"
		},
		{
			"match": "\\b(keyDown|keyPress|keyRelease|mouseX|mouseY|mouseDown|mousePress|mouseRelease|getQuit|getPads|padX|padY|padX|padH|padV|padAxis|padHatPress|padHatRelease|padHatDown|padButtonPress|padButtonRelease|padButtonDown)\\b",
			"name": "variable.language.brux.standard.input"
		},
		{
			"match": "\\b(update|getOS|wait|donut|getFrames)\\b",
			"name": "variable.language.brux.standard.main"
		},
		{
			"match": "\\b(randInt|randFloat|lendirX|lendirY|distance2|distance3|wrap)\\b",
			"name": "variable.language.brux.standard.maths"
		},
		{
			"match": "\\b(arraySort)\\b",
			"name": "variable.language.brux.standard.misc"
		},
		{
			"match": "\\b(newSprite|drawSprite|drawSpriteEx|findSprite|spriteName|spriteW|spriteH)\\b",
			"name": "variable.language.brux.standard.sprites"
		},
		{
			"match": "\\b(drawText|newFont)\\b",
			"name": "variable.language.brux.standard.text"
		},
		{
			"match": "\\b(Tilemap|)\\b",
			"name": "variable.language.brux.standard.tilemaps"
		},
		{
			"match": "\\b(assert|castf2i|casti2f|date|getroottable|swap2|swap4|swapfloat|time)\\b",
			"name": "variable.language.brux.system"
		},
		{
			"match": "\\;",
			"name": "punctuation.terminator.statement.brux"
		},
		{
			"match": "\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))\\b",
			"name": "constant.numeric.brux"
		},
		{
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.brux"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.brux"
				}
			},
			"name": "string.quoted.single.brux"
		},
		{
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.brux"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.brux"
				}
			},
			"name": "string.quoted.double.brux"
		},
		{
			"begin": "/\\*\\*(?!/)",
			"captures": {
				"0": {
					"name": "punctuation.definition.comment.brux"
				}
			},
			"end": "\\*/",
			"name": "comment.block.documentation.brux"
		},
		{
			"begin": "/\\*",
			"captures": {
				"0": {
					"name": "punctuation.definition.comment.brux"
				}
			},
			"end": "\\*/",
			"name": "comment.block.brux"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.brux"
				}
			},
			"match": "(//).*$\\n?",
			"name": "comment.line.double-slash.brux"
		},
		{
			"match": "\\{|\\}",
			"name": "meta.brace.curly.brux"
		},
		{
			"match": "\\(|\\)",
			"name": "meta.brace.round.brux"
		},
		{
			"match": "\\[|\\]",
			"name": "meta.brace.square.brux"
		}
	],
	"scopeName": "source.nut",
	"uuid": "ccfe3470-9899-4d26-9f42-9c880131b71c"
}
